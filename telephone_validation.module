<?php

/**
 * @file
 * Validate phone number.
 *
 * Adds element validator to telephone_default widget to make sure phone has
 * a valid format.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function telephone_validation_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Get field and instance.
  $field = $form['#field'];
  $instance = $form['#instance'];

  if ($instance['widget']['type'] == 'telephone_default' && !$field['locked']) {

    if (!isset($instance['widget']['settings']['telephone_validation'])) {
      // If that's a brand new instance use default values.
      $instance['widget']['settings']['telephone_validation'] = array(
        'valid_format' => \libphonenumber\PhoneNumberFormat::E164,
        'valid_countries' => array(),
      );
    }
    $settings = $instance['widget']['settings']['telephone_validation'];

    if (!isset($form['instance']['widget']['settings'])) {
      // Initialize settings array.
      $form['instance']['widget']['settings'] = array();
    }

    // Add parent fieldset for module settings.
    $form['instance']['widget']['settings']['telephone_validation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Validation'),
    );

    // Right now format field supports E164 format only (just to be sure that
    // phone validator will work correctly).
    $form['instance']['widget']['settings']['telephone_validation']['valid_format'] = array(
      '#type' => 'select',
      '#title' => t('Valid telephone format'),
      '#default_value' => $settings['valid_format'],
      '#options' => array(
        \libphonenumber\PhoneNumberFormat::E164 => t('E164'),
      ),
    );

    // Populate list of countries.
    include_once DRUPAL_ROOT . '/includes/iso.inc';
    $form['instance']['widget']['settings']['telephone_validation']['valid_countries'] = array(
      '#type' => 'select',
      '#title' => t('Valid countries'),
      '#description' => t('If no country selected - all countries valid'),
      '#default_value' => $settings['valid_countries'],
      '#multiple' => TRUE,
      '#options' => _country_get_predefined_list(),
    );
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function telephone_validation_field_widget_telephone_default_form_alter(&$element, &$form_state, $context) {
  $element['value']['#element_validate'] = array('_telephone_validation_element');
}

/**
 * Telephone element validation.
 */
function _telephone_validation_element($element, &$form_state) {
  $value = $element['#value'];
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  if (!isset($instance['widget']['settings']['telephone_validation'])) {
    $instance['widget']['settings']['telephone_validation'] = array();
  }
  $settings = $instance['widget']['settings']['telephone_validation'];

  // Do validation only if value is not empty.
  if (!empty($value)) {
    // Since the only correct phone number format is right now E164, it should
    // start with + and country code.
    if (stripos($value, '+') !== 0) {
      form_error($element, t('%name telephone number has to start with plus (+) and country code.', array('%name' => $element['#title'])));
      return FALSE;
    }
    // If number looks more or less ok, use google libphoonenumber library to
    // parse  it.
    $phone_util = \libphonenumber\PhoneNumberUtil::getInstance();
    try {
      // If number will be incorrect (there will be no way to parse it) we will
      // get an exception here.
      $number = $phone_util->parse($value, NULL);
    }
    catch (Exception $e) {
      // Log an exception and show form error.
      watchdog_exception('telephone_validation', $e);
      form_error($element, t('%name is not a valid telephone number.', array('%name' => $element['#title'])));
      return FALSE;
    }
    // If number "seems" to be valid - validate it.
    if (!$phone_util->isValidNumber($number)) {
      form_error($element, t('%name is not a valid telephone number.', array('%name' => $element['#title'])));
      return FALSE;
    }
    // If number should come for one of selected countries (per instance).
    if (!empty($settings['valid_countries']) && (!($country = $phone_util->getRegionCodeForNumber($number)) || !isset($settings['valid_countries'][$country]))) {
      form_error($element, t('Telephone number country of origin is not supported by %name field.', array('%name' => $element['#title'])));
      return FALSE;
    }
  }
}
