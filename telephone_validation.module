<?php

/**
 * @file
 * Validate telephone number.
 */

use libphonenumber\PhoneNumberFormat;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_element_info_alter().
 */
function telephone_validation_element_info_alter(array &$types) {
  
  $config = \Drupal::config('telephone_validation.settings');
  $types['tel']['#element_validate_settings'] = [
    'format' => $config->get('format') ?: PhoneNumberFormat::E164,
    'country'=> $config->get('country') ?: [],
  ];
}

/**
 * Implements hook_field_info_alter().
 *
 * Add constraint to telephone field.
 */
function telephone_validation_field_info_alter(&$info) {
  $info['telephone']['constraints']['Telephone'] = array();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function telephone_validation_form_field_config_edit_form_alter(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\field\Entity\FieldConfig $field */
  $field = $form_state->getFormObject()->getEntity();
  if ($field->getType() == 'telephone') {
    /** @var \Drupal\telephone_validation\Validator $validator */
    $validator = \Drupal::service('telephone_validation.validator');
    $form['telephone_validation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Telephone validation'),
    );

    // Right now format field supports E164 format only (just to be sure that
    // phone validator will work correctly).
    $form['telephone_validation']['format'] = array(
      '#type' => 'select',
      '#title' => t('Valid telephone format'),
      '#description' => t('It is recommended to use E164 validation format. Validator will discover phone number country of origin automatically. If you want to limit field instance to one country only you can change it National format and choose country in next field.'),
      '#default_value' => $field->getThirdPartySetting('telephone_validation', 'format', PhoneNumberFormat::E164),
      '#options' => array(
        PhoneNumberFormat::E164 => t('E164'),
        PhoneNumberFormat::NATIONAL => t('National'),
      ),
      '#ajax' => array(
        'callback' => '_telephone_validation_country_ajax_callback',
        'wrapper' => 'telephone-validation-country',
        'method' => 'replace',
      ),
    );
    $val = $form_state->getValue('format') ?: $form['telephone_validation']['format']['#default_value'];
    $form['telephone_validation']['country'] = array(
      '#type' => 'select',
      '#title' => t('List of valid countries'),
      '#description' => t('If no country selected all countries are valid.'),
      '#default_value' => $field->getThirdPartySetting('telephone_validation', 'country'),
      '#multiple' => $val != PhoneNumberFormat::NATIONAL,
      '#options' => $validator->getCountryList(),
      '#prefix' => '<div id="telephone-validation-country">',
      '#suffix' => '</div>',
    );
    $form['actions']['submit']['#submit'][] = 'telephone_validation_form_field_config_edit_form_submit';
  }
}

/**
 * Returns valid countries field on ajax request.
 */
function _telephone_validation_country_ajax_callback($form, FormStateInterface $form_state) {
  return $form['telephone_validation']['country'];
}

/**
 * Form submit handler.
 */
function telephone_validation_form_field_config_edit_form_submit(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\field\Entity\FieldConfig $field */
  $field = $form_state->getFormObject()->getEntity();
  $field->setThirdPartySetting('telephone_validation', 'format', $form_state->getValue('format'));
  $country = $form_state->getValue('country');
  $field->setThirdPartySetting('telephone_validation', 'country', is_array($country) ? $country : array($country));
  $field->save();
}
